import esbuild from 'esbuild'
import stylePlugin from 'esbuild-style-plugin'
import { readdirSync, statSync, copyFileSync, mkdirSync, existsSync, cpSync, rmSync } from 'fs' // ‚úÖ ƒê√É TH√äM: rmSync
import { join } from 'path'
import tailwindcss from 'tailwindcss' // ‚úÖ ƒê√£ s·ª≠a l·ªói: Import tailwindcss
import autoprefixer from 'autoprefixer' // ‚úÖ ƒê√£ s·ª≠a l·ªói: Import autoprefixer

// Get all files recursively
function getFiles(dir) {
  const files = []
  if (!existsSync(dir)) return files
  const items = readdirSync(dir)
  
  for (const item of items) {
    const path = join(dir, item)
    if (statSync(path).isDirectory()) {
      files.push(...getFiles(path))
    } else {
      files.push(path)
    }
  }
  
  return files
}

// H√†m d·ªçn d·∫πp th∆∞ m·ª•c dist (ƒê√É S·ª¨A L·ªñI)
function cleanDist(dir) {
  if (existsSync(dir)) {
    // S·ª¨A L·ªñI: S·ª≠ d·ª•ng rmSync ƒë·ªÉ x√≥a th∆∞ m·ª•c m·ªôt c√°ch an to√†n
    rmSync(dir, { recursive: true, force: true }) 
  }
}

const isProduction = process.argv.includes('--production')
const outDir = 'dist'

// D·ªçn d·∫πp th∆∞ m·ª•c dist tr∆∞·ªõc khi build
cleanDist(outDir)

// T·∫°o th∆∞ m·ª•c dist n·∫øu ch∆∞a c√≥
if (!existsSync(outDir)) {
  mkdirSync(outDir)
}

await esbuild.build({
  entryPoints: getFiles('src').filter(file => 
    file.endsWith('.ts') || file.endsWith('.tsx') || file.endsWith('.js') || file.endsWith('.jsx')
  ).filter(file => !file.includes('/__tests__/')), // B·ªè qua c√°c file test
  
  // Ch·ªâ bundle file main.tsx, c√°c entry points c√≤n l·∫°i s·∫Ω l√† c√°c file dependencies
  entryPoints: ['./src/main.tsx'], 
  
  bundle: true,
  outdir: outDir,
  platform: 'browser',
  format: 'esm',
  target: 'es2020',
  minify: isProduction,
  sourcemap: !isProduction,
  plugins: [
    stylePlugin({
      // S·ª≠ d·ª•ng t√™n bi·∫øn ƒë√£ import (tailwindcss, autoprefixer)
      postcss: {
        plugins: [tailwindcss, autoprefixer] 
      }
    })
  ],
  // T√πy ch·ªçn: External React ƒë·ªÉ gi·∫£m k√≠ch th∆∞·ªõc bundle n·∫øu b·∫°n mu·ªën s·ª≠ d·ª•ng CDN (Kh√¥ng khuy·∫øn ngh·ªã cho Vercel)
  // external: ['react', 'react-dom'], 
  define: {
    'process.env.NODE_ENV': isProduction ? '\"production\"' : '\"development\"'
  },
  // T√πy ch·ªçn: react-shim.js c√≥ th·ªÉ l√† m·ªôt file nh·ªè ƒë·ªÉ import React v√†o m√¥i tr∆∞·ªùng c≈© h∆°n, nh∆∞ng kh√¥ng c·∫ßn thi·∫øt v·ªõi React 18
  // inject: ['./src/react-shim.js'], 
  loader: {
    '.js': 'jsx',
    '.ts': 'tsx'
  },
  
  // ƒê·∫£m b·∫£o t√™n file ƒë·∫ßu ra l√† index.js ƒë·ªÉ kh·ªõp v·ªõi index.html
  outbase: 'src',
  outExtension: { '.js': '.js' },
  entryNames: '[dir]/[name]',
})

// ‚úÖ ƒê√É S·ª¨A L·ªñI: T√¨m file index.html trong c·∫£ th∆∞ m·ª•c g·ªëc v√† th∆∞ m·ª•c 'src/'
const sourceIndexPath = existsSync('index.html') ? 'index.html' : (existsSync('src/index.html') ? 'src/index.html' : null);

if (sourceIndexPath) {
    try {
        // Sao ch√©p index.html t·ª´ v·ªã tr√≠ t√¨m ƒë∆∞·ª£c sang th∆∞ m·ª•c 'dist'
        copyFileSync(sourceIndexPath, join(outDir, 'index.html'));
        console.log(`‚úÖ Copied index.html from ${sourceIndexPath} to ${outDir}`);
    } catch (error) {
        console.error(`‚ùå Failed to copy index.html: ${error}`);
    }
} else {
    console.error('‚ùå FATAL ERROR: index.html not found in root or src/ directory.');
}

console.log(`\nüéâ Build ${isProduction ? 'Production' : 'Development'} ho√†n t·∫•t th√†nh c√¥ng!`)